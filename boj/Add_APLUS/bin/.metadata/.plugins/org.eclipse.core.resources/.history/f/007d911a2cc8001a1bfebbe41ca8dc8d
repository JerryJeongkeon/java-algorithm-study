package programmers_Lv2;

import java.util.PriorityQueue;

public class 점프와순간이동 {
	static int n = 5;
	static int min, target, doubleIdx, nextIdx, tempDepth;
	static int max = 100001;
	static PriorityQueue<Pos> pq;
	static boolean[] visited = new boolean[100001];

	public static void main(String[] args) {
		min = Integer.MAX_VALUE;
		target = n;

		bfs(new Pos(1, 1));

		System.out.println("ANSWER : " + min);
	}

	static void bfs(Pos start) {
		pq = new PriorityQueue<>();
		pq.offer(start);
		visited[1] = true;

		while (!pq.isEmpty()) {
			Pos temp = pq.poll();
			System.out.println("now  : " + temp.now + ", depth : " + temp.depth);
			visited[temp.now] = true;

			if (temp.depth > min)
				return;

			if (temp.now == target) {
				min = temp.depth;
				return;
			}

			doubleIdx = temp.now * 2;
			nextIdx = temp.now + 1;
			tempDepth = temp.depth;

			if (doubleIdx < 100001 && !visited[doubleIdx]) {
				pq.offer(new Pos(doubleIdx, tempDepth));
			}

			if (nextIdx < max && !visited[nextIdx]) {
				pq.offer(new Pos(nextIdx, tempDepth + 1));
			}

		}
	}

	static class Pos implements Comparable<Pos> {
		int now;
		int depth;

		public Pos(int n, int d) {
			this.now = n;
			this.depth = d;
		}

		@Override
		public int compareTo(Pos o) {
			return this.depth - o.depth;
		}
	}

}
